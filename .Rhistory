aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[1,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[1,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal
aim
depth
# --- PUZZLE 2 -------------------------------------------------------------
input.mat <- read.mat("input-day2.test.txt")
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[1,i], x = c("action", "val")[i], envir = parent.frame()), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
aim
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = parent.frame()), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal
aim
depth
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = parent.frame()), NA_character_)
print(ls())
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
# --- PREP -----------------------------------------------------------------
source("utils.R")
# --- PUZZLE 2 -------------------------------------------------------------
input.mat <- read.mat("input-day2.test.txt")
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = parent.frame()), NA_character_)
print(ls())
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i]), NA_character_)
print(ls())
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
print(ls)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
print(ls)
print(ls())
# --- PUZZLE 2 -------------------------------------------------------------
input.mat <- read.mat("input-day2.test.txt")
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
print(ls())
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal
aim
depth
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
print(aim)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
print(depth)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
depth
as.character(substitute("cbind"))
as.character(substitute(cbind))
# --- PUZZLE 2 -------------------------------------------------------------
input.mat <- read.mat("input-day2.test.txt")
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
horizontal <- horizontal + val
depth <- depth + horizontal * aim
print(depth)
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(depth)
horizontal <- horizontal + val
depth <- depth + horizontal * aim
print(depth)
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(horizontal)
horizontal <- horizontal + val
depth <- depth + horizontal * aim
print(horizontal)
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(horizontal)
print(dept)
print(aim)
horizontal <- horizontal + val
depth <- depth + horizontal * aim
print("---")
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(horizontal)
print(depth)
print(aim)
horizontal <- horizontal + val
depth <- depth + horizontal * aim
print("---")
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
input.mat
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
depth <- depth + horizontal * aim
horizontal <- horizontal + val
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
depth
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(horizontal)
print(depth)
print(aim)
depth <- depth + horizontal * aim
horizontal <- horizontal + val
print("---")
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
aim
depth
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(horizontal)
print(depth)
print(aim)
horizontal <- horizontal + val
depth <- depth + val * aim
print("---")
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
depth
aim
horizontal
# input.mat <- "forward 5\ndown 5\nforward 8\nup 3\ndown 8\nforward 2"
# cat(input.mat, file = "input-day2.test.txt")
# input.mat <- read.mat("input-day2.test.txt")
input.mat <- read.mat("input-day2.txt")
# --- PREP -----------------------------------------------------------------
source("utils.R")
# input.mat <- "forward 5\ndown 5\nforward 8\nup 3\ndown 8\nforward 2"
# cat(input.mat, file = "input-day2.test.txt")
# input.mat <- read.mat("input-day2.test.txt")
input.mat <- read.mat("input-day2.txt")
# --- PUZZLE 2 -------------------------------------------------------------
horizontal <- 0
aim <- 0
depth <- 0
for(r in seq(nrow(input.mat))){
vapply(1:2, function(i) assign(value = input.mat[r,i], x = c("action", "val")[i], envir = .GlobalEnv), NA_character_)
# funs <- list(
#   forward = function(val) assign("horizontal", get("horizontal")+as.integer(val), envir = parent.frame()),
#   down = function(val) assign("depth", get("depth")+as.integer(val), envir = parent.frame()),
#   up = function(val) assign("depth", get("depth")-as.integer(val), envir = parent.frame())
# )
# funs[action](val)
val <- as.integer(val)
if(action=="forward"){
print(horizontal)
print(depth)
print(aim)
horizontal <- horizontal + val
depth <- depth + val * aim
print("---")
} else if(action=="down"){
aim <- aim + val
} else if(action=="up"){
aim <- aim - val
} else {
message("error in the matrix")
}
}
horizontal*depth
